resource_types:
- name: terraform
  type: docker-image
  source:
    repository: totr/terraform-kube-builder
    username: ((docker-hub-username))
    password: ((docker-hub-password))
    tag: 3.0.0

- name: ansible
  type: docker-image
  source:
    repository: totr/kubespray-builder
    username: ((docker-hub-username))
    password: ((docker-hub-password))
    tag: 2.1.0

- name: kubernetes
  type: docker-image
  source:
    repository: zlabjp/kubernetes-resource
    username: ((docker-hub-username))
    password: ((docker-hub-password))
    tag: "1.16"

resources: 
- name: terraform-state
  type: terraform 
  icon: database
  source:
    env_name: ((env-group-name))-((env-name))
    backend_type: s3
    backend_config:
# see https://wasabi-support.zendesk.com/hc/en-us/articles/360003362071-How-I-do-use-Terraform-with-Wasabi-
      endpoint: "https://s3.eu-central-1.wasabisys.com"
      skip_credentials_validation: true
      skip_metadata_api_check: true
      bucket: ((terraform-backend-bucket))
      key: terraform.tfstate
      region: eu-central-1
      access_key: ((terraform-backend-access-key))
      secret_key: ((terraform-backend-secret-key))
    env:
      ARM_PROVIDER_TWOPOINTZERO_RESOURCES: "True"
        
- name: kubeconfig
  icon: database
  type: s3
  source:
    endpoint: "https://s3.eu-central-1.wasabisys.com"
    region_name: eu-central-1
    bucket: ((terraform-backend-bucket))
    versioned_file: env:/((env-group-name))-((env-name))/kubeconfig.yaml
    access_key_id: ((terraform-backend-access-key))
    secret_access_key: ((terraform-backend-secret-key))

- name: k8s-components
  type: kubernetes    

- name: terraform-kube
  type: git
  icon: github-circle
  source:
    uri: https://github.com/totr/terraform-kube
    branch: master

- name: terraform-environments
  type: git
  icon: github-circle
  source:
    uri: ((env-git-repo-uri))
    branch: master
    git_crypt_key: ((terraform-environments-git-crypt-key))
    private_key: ((terraform-environments-git-private-key))

- name: ansible-playbook
  type: ansible
  source:
    debug: false
    user: ubuntu
    ssh_private_key: ""
    env:
      ANSIBLE_INVALID_TASK_ATTRIBUTE_FAILED: "False"
    verbose: v

- name: kubespray
  type: git
  icon: github-circle
  source:
    uri: https://github.com/kubernetes-sigs/kubespray.git
    tag_filter: v2.12.4

jobs:
- name: create-servers
  plan:
    - get: terraform-kube
    - get: terraform-environments
    - put: terraform-state
      params:
        env_name: ((env-group-name))-((env-name))
        var_files: [terraform-environments/((env-name)).tfvars]
        terraform_source: terraform-kube

- name: deploy-k8s-cluster
  plan:
    - get: kubespray
    - get: terraform-state
      trigger: true
      passed: [create-servers]
      params:
        output_statefile: true
    - task: kubespray-inventory
      config:
        platform: linux
        image_resource:
          type: registry-image
          source: { repository: colstrom/jq }
        inputs:
        - name: terraform-state
        run:
          path: sh
          args:
          - -c
          - |
              echo "Environment name: $(cat terraform-state/name)"
              mkdir -p inventory/group_vars/k8s-cluster
              cat terraform-state/metadata | jq .kubespray_inventory --raw-output > inventory/hosts.ini
              cat terraform-state/metadata | jq .kubespray_cluster_vars --raw-output > inventory/group_vars/k8s-cluster/k8s-cluster.yml
              cat terraform-state/metadata | jq .kubespray_addons_vars --raw-output > inventory/group_vars/k8s-cluster/addons.yml
              cat terraform-state/metadata | jq .ssh_private_key --raw-output > inventory/ssh.key
              cat terraform-state/metadata | jq .master_nodes[0].public_ip --raw-output > inventory/k8s-master-1.ini
              cat terraform-state/metadata | jq .admin_user --raw-output >> inventory/k8s-master-1.ini
              chmod 600 inventory/ssh.key
        outputs:
        - name: inventory
    - put: kubespray-deploy-cluster
      resource: ansible-playbook
      params:
        become: true
        inventory: inventory/hosts.ini
        playbook: kubespray/cluster.yml
        path: /
    # FIXME deploy based on the type of cloud provider    
    #- put: kubespray-deploy-load-balancer
    #  resource: ansible-playbook
    #  params:
    #    become: true
    #    inventory: inventory/hosts.ini
    #    playbook: kubespray/contrib/metallb/metallb.yml
    #    path: /
    - task: get-kubeconfig
      config:
        platform: linux
        image_resource:
          type: registry-image
          source:
            repository: kroniak/ssh-client
            tag: 3.9
        inputs:
        - name: inventory
        outputs: 
        - name: k8s-conf
        run:
          path: sh
          args:
          - -c
          - |
              K8S_MASTER_1_PUBLIC_IP=$(sed -n 1p inventory/k8s-master-1.ini)
              K8S_MASTER_1_ADMIN_USER=$(sed -n 2p inventory/k8s-master-1.ini)
              ssh -i inventory/ssh.key -o "StrictHostKeyChecking=no" $K8S_MASTER_1_ADMIN_USER@$K8S_MASTER_1_PUBLIC_IP 'sudo cat /etc/kubernetes/admin.conf' > k8s-conf/admin.conf
              sed -i "s/https.*6443/https:\/\/$K8S_MASTER_1_PUBLIC_IP:6443/g" k8s-conf/admin.conf
              sed -i '$!N;s/certificate-authority-data.*server/insecure-skip-tls-verify: true\n    server/g;P;D' k8s-conf/admin.conf
    - put: kubeconfig
      params:
        file: k8s-conf/admin.conf
  
- name: deploy-k8s-components
  plan:
  - get: terraform-kube
  - get: terraform-environments
  - get: kubeconfig
    trigger: true
    passed: [deploy-k8s-cluster]
  - put: sealed-secrets-deploy
    resource: k8s-components
    params:
      kubectl: apply -f https://github.com/bitnami-labs/sealed-secrets/releases/download/v0.11.0/controller.yaml
      wait_until_ready_selector: name=sealed-secrets-controller
      kubeconfig_file: kubeconfig/kubeconfig.yaml
  - put: argocd-deploy
    resource: k8s-components
    params:
      kubectl: apply -f terraform-kube/k8s-manifests/argocd/namespace.yaml -f https://raw.githubusercontent.com/argoproj/argo-cd/v1.4.2/manifests/ha/install.yaml -n argocd
      wait_until_ready_selector: app.kubernetes.io/name=argocd-server
      kubeconfig_file: kubeconfig/kubeconfig.yaml
  - task: argocd-generate-config
    config:
      image_resource:
        type: docker-image
        source:
          repository: totr/kubespray-builder
          tag: 2.1.0
      platform: linux
      inputs:
      - name: terraform-kube
      - name: terraform-environments
      - name: kubeconfig
      params: 
          KUBECONFIG: kubeconfig/kubeconfig.yaml 
      run:
        path: sh
        args:
        - -c
        - |
            cp -r terraform-environments/. terraform-environments-secrets
            htpasswd -bnBC 10 "" $(cat terraform-environments/((env-name)).tfvars | grep k8s_argocd_admin_pass | cut -d'=' -f2 | tr -d \") | tr -d ':\n' > argocd-config/argocd-admin-pass.ini
            cat terraform-kube/k8s-manifests/argocd/configmap.yaml | sed 's|{GIT_REPOSITORY_URL}|"((env-git-repo-uri))"|g' > argocd-config/configmap.yaml
            echo -n "((terraform-environments-git-private-key))" | base64 -w 0 > argocd-config/ssh.key
            cat terraform-kube/k8s-manifests/argocd/system-apps-secret.yaml | sed "s|{SSH_PRIVATE_KEY}|$(cat argocd-config/ssh.key)|g" > argocd-config/system-apps-secret.yaml
            cat terraform-kube/k8s-manifests/argocd/system-apps.yaml | sed 's|{SYSTEM_APPS_SOURCE_PATH}|"((env-name))/applications"|g' > argocd-config/system-apps-tmp.yaml
            cat argocd-config/system-apps-tmp.yaml | sed 's|{GIT_REPOSITORY_URL}|"((env-git-repo-uri))"|g' > argocd-config/system-apps.yaml            
            cat terraform-kube/k8s-manifests/argocd/update-values-template.yaml | sed "s|{DNS_API_KEY}|$(cat terraform-environments/((env-name)).tfvars | grep dns_admin_api_token | cut -d'=' -f2 | tr -d \ | xargs echo -n | kubeseal --raw --from-file=/dev/stdin --namespace istio-system --name dns-api-key-secret)|g" > argocd-config/update-values.yaml
            cat argocd-config/update-values.yaml | sed "s|{STORAGE_TOKEN}|$(cat terraform-environments/((env-name)).tfvars | grep provider_client_secret | cut -d'=' -f2 | tr -d \ | xargs echo -n | kubeseal --raw --from-file=/dev/stdin --namespace kube-system --name digitalocean)|g" > argocd-config/update-values.yaml
            cat argocd-config/update-values.yaml | yq w -s - terraform-environments/((env-name))/applications/values.yaml > terraform-environments-secrets/((env-name))/applications/values.yaml
            cp terraform-kube/k8s-manifests/argocd/system-apps-project.yaml argocd-config/system-apps-project.yaml
            cd terraform-environments-secrets
            git config --global user.name "Concourse CI"
            git config --global user.email "concourse@concourse.ci"
            git add .
            git commit -m "Generating secrets"
      outputs:
        - name: argocd-config
        - name: terraform-environments-secrets
  - put: terraform-environments
    params:
      repository: terraform-environments-secrets
  - put: argocd-configure-auth
    resource: k8s-components
    params:
      kubectl: | 
        patch secret -n argocd argocd-secret -p '{"stringData":{"admin.password":"'$(cat argocd-config/argocd-admin-pass.ini)'"}}'
      kubeconfig_file: kubeconfig/kubeconfig.yaml
  - put: argocd-delete-global-config
    resource: k8s-components
    params:
      kubectl: | 
        delete configmap -n argocd argocd-cm --ignore-not-found
      kubeconfig_file: kubeconfig/kubeconfig.yaml
  - put: argocd-create-global-config
    resource: k8s-components
    params:
      kubectl: | 
        apply -n argocd -f argocd-config/configmap.yaml
      kubeconfig_file: kubeconfig/kubeconfig.yaml
  - put: argocd-create-system-apps-secret
    resource: k8s-components
    params:
      kubectl: | 
        apply -n argocd -f argocd-config/system-apps-secret.yaml
      kubeconfig_file: kubeconfig/kubeconfig.yaml
  - put: argocd-register-system-apps-project
    resource: k8s-components
    params:
      kubectl: apply -n argocd -f argocd-config/system-apps-project.yaml
      kubeconfig_file: kubeconfig/kubeconfig.yaml
  - put: argocd-patch-deployment
    resource: k8s-components
    params:
      kubectl: | 
        patch deployment/argocd-server -n argocd --type='json' -p '[{"op":"add","path":"/spec/template/spec/containers/0/command/1","value":"--insecure"}]'
      wait_until_ready_selector: app.kubernetes.io/name=argocd-server
      kubeconfig_file: kubeconfig/kubeconfig.yaml
  - put: argocd-restart
    resource: k8s-components
    params:
      kubectl: delete pods -n argocd -l app.kubernetes.io/name=argocd-server
      wait_until_ready_selector: app.kubernetes.io/name=argocd-server
      kubeconfig_file: kubeconfig/kubeconfig.yaml
  - put: argocd-register-system-apps
    resource: k8s-components
    params:
      kubectl: apply -n argocd -f argocd-config/system-apps.yaml
      kubeconfig_file: kubeconfig/kubeconfig.yaml