resource_types:
- name: terraform
  type: docker-image
  source:
    repository: totr/terraform-kube-builder
    tag: 0.12.18

- name: ansible
  type: docker-image
  source:
    repository: totr/kubespray-builder
    tag: 2.0.0

- name: kubernetes
  type: docker-image
  source:
    repository: zlabjp/kubernetes-resource
    tag: "1.16"

resources:
- name: terraform-state
  type: terraform 
  icon: database
  source:
    env_name: ((env-name))
    backend_type: s3
    backend_config:
# see https://wasabi-support.zendesk.com/hc/en-us/articles/360003362071-How-I-do-use-Terraform-with-Wasabi-
      endpoint: "https://s3.eu-central-1.wasabisys.com"
      skip_credentials_validation: true
      skip_metadata_api_check: true
      bucket: terraform-kube
      key: terraform.tfstate
      region: eu-central-1
      access_key: ((terraform-backend-access-key))
      secret_key: ((terraform-backend-secret-key))

- name: kubeconfig
  icon: database
  type: s3
  source:
    endpoint: "https://s3.eu-central-1.wasabisys.com"
    region_name: eu-central-1
    bucket: terraform-kube
    versioned_file: env:/((env-name))/kubeconfig.yaml
    access_key_id: ((terraform-backend-access-key))
    secret_access_key: ((terraform-backend-secret-key))

- name: k8s-argocd
  type: kubernetes

- name: terraform-kube
  type: git
  icon: github-circle
  source:
    uri: https://github.com/totr/terraform-kube
    branch: master
    git_crypt_key: ((git-crypt-key))

- name: ansible-playbook
  type: ansible
  source:
    debug: false
    user: ubuntu
    ssh_private_key: ""
    env:
      ANSIBLE_INVALID_TASK_ATTRIBUTE_FAILED: "False"
    verbose: v

- name: kubespray
  type: git
  icon: github-circle
  source:
    uri: https://github.com/kubernetes-sigs/kubespray.git
    tag_filter: v2.12.0

jobs:
- name: create-servers
  plan:
    - get: terraform-kube
      trigger: true
    - put: terraform-state
      params:
        env_name: ((env-name))
        var_files: [terraform-kube/environments/((env-name)).tfvars]
        terraform_source: terraform-kube

- name: deploy-k8s-cluster
  plan:
    - get: kubespray
    - get: terraform-state
      trigger: true
      passed: [create-servers]
      params:
        output_statefile: true
    - task: kubespray-inventory
      config:
        platform: linux
        image_resource:
          type: registry-image
          source: { repository: colstrom/jq }
        inputs:
        - name: terraform-state
        run:
          path: sh
          args:
          - -c
          - |
              echo "Environment name: $(cat terraform-state/name)"
              mkdir -p inventory/group_vars/k8s-cluster
              mkdir -p inventory/group_vars/all
              TERRAFORM_STATE_METADATA=$(cat terraform-state/metadata)
              echo $TERRAFORM_STATE_METADATA | jq .kubespray_inventory --raw-output > inventory/hosts.ini
              echo $TERRAFORM_STATE_METADATA | jq .kubespray_cluster_vars --raw-output > inventory/group_vars/k8s-cluster/k8s-cluster.yml
              echo $TERRAFORM_STATE_METADATA | jq .kubespray_addons_vars --raw-output > inventory/group_vars/k8s-cluster/addons.yml
              echo $TERRAFORM_STATE_METADATA | jq .kubespray_addons_vars --raw-output > inventory/group_vars/all/all.yml
              echo $TERRAFORM_STATE_METADATA | jq .ssh_private_key --raw-output > inventory/ssh.key
              echo $TERRAFORM_STATE_METADATA | jq .master_nodes[0].public_ip --raw-output > inventory/k8s-master-1-ip.properties
              chmod 600 inventory/ssh.key
        outputs:
        - name: inventory
    - put: ansible-playbook
      params:
        inventory: inventory/hosts.ini
        playbook: kubespray/cluster.yml
        path: /
    - task: get-kubeconfig
      config:
        platform: linux
        image_resource:
          type: registry-image
          source:
            repository: kroniak/ssh-client
            tag: 3.9
        inputs:
        - name: inventory
        outputs: 
        - name: k8s-conf
        run:
          path: sh
          args:
          - -c
          - |
              K8S_MASTER_1_PUBLIC_IP=$(sed -n 1p inventory/k8s-master-1-ip.properties)
              ssh -i inventory/ssh.key -o "StrictHostKeyChecking=no" root@$K8S_MASTER_1_PUBLIC_IP 'cat /etc/kubernetes/admin.conf' > k8s-conf/admin.conf
              sed -i "s/https.*6443/https:\/\/$K8S_MASTER_1_PUBLIC_IP:6443/g" k8s-conf/admin.conf
    - put: kubeconfig
      params:
        file: k8s-conf/admin.conf

- name: deploy-k8s-components
  plan:
  - get: terraform-kube
  - get: kubeconfig
    trigger: true
    passed: [deploy-k8s-cluster]
  - put: k8s-argocd
    params:
      kubectl: apply -f terraform-kube/k8s-manifests/argocd/namespace.yaml -f https://raw.githubusercontent.com/argoproj/argo-cd/v1.3.6/manifests/ha/install.yaml -n argocd-system
      wait_until_ready_selector: app.kubernetes.io/name=argocd-server
      kubeconfig_file: kubeconfig/kubeconfig.yaml